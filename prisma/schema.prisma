generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  password        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  role            UserRole

  // Relación 1 a 1 con Profile
  profile         Profile?

  // Relaciones con Proyectos y Trabajos
  clientProjects  Project[] @relation("ClientProjects")
  workerProjects  Project[] @relation("WorkerProjects")
  clientJobs      Job[]     @relation("ClientJobs")
  workerJobs      Job[]     @relation("WorkerJobs")

  // Relaciones con Reseñas
  reviewsGiven    Review[]  @relation("Reviewer")
  reviewsReceived Review[]  @relation("ReviewedUser")

  // Relación con tareas asignadas
  assignedTasks   Task[]    @relation("AssignedTasks") // Relación inversa con Task

  // Datos específicos de Freelancer y Worker
  specialities    String[]
  experience      Int?
  cvUrl           String?
  earnings        Float?    @default(0)

  // Datos específicos de Client
  companyName     String?
}

enum UserRole {
  FREELANCER
  WORKER
  CLIENT
}

model Profile {
  id        Int     @id @default(autoincrement())
  bio       String?
  location  String?
  website   String?
  skills    String?
  picture   String?

  // Relación 1 a 1 con User
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
}

model Review {
  id             Int      @id @default(autoincrement())
  rating         Int
  comment        String
  createdAt      DateTime @default(now())

  // Relación con usuarios (quién reseña y quién es reseñado)
  reviewer       User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewerId     Int
  reviewedUser   User     @relation("ReviewedUser", fields: [reviewedUserId], references: [id])
  reviewedUserId Int
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  assignedTo  User?    @relation("AssignedTasks", fields: [assignedToId], references: [id]) // Relación con User
  assignedToId Int?
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  budget      Float

  // Relación con el cliente
  client      User     @relation("ClientProjects", fields: [clientId], references: [id])
  clientId    Int

  // Relación con el trabajador
  worker      User?    @relation("WorkerProjects", fields: [workerId], references: [id])
  workerId    Int?

  tasks       Task[]   // Tareas asociadas al proyecto
}

model Job {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  salary      Float

  // Relación con el cliente
  client      User     @relation("ClientJobs", fields: [clientId], references: [id])
  clientId    Int

  // Relación con el trabajador
  worker      User?    @relation("WorkerJobs", fields: [workerId], references: [id])
  workerId    Int?
}